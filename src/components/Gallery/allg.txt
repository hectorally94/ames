// components/Gallery/Gallery.tsx
import React, { useEffect, useState } from 'react';
import GalleryItem from './GalleryItem';
import { useTranslation } from 'react-i18next';
import { useSelector } from 'react-redux';
import { RootState } from '../../common/store';
import { useGetPaginatedType_image_image_storeAllOneQuery } from '../../redux/api/storeTypeImageImageStore';
import { TypeImageTranslateDto, useGetAllTypeImageTranslateDtosQuery } from '../../redux/api/typeImageTranslateApiSlice';
  
interface GalleryItemData {
  id: number;
  typeImageTranslateId: number;
  typeTranslate:any;
  imageStoreId: number;
  imageStoreName:any;
  imageStoreUrl:any;

  languageName: string;
}

interface MyResponse {
  message: string;
  data: GalleryItemData[];
}  
interface MyResponseType {
  message: string;
  data: TypeImageTranslateDto[];
}  


//const categories = ['tous', 'Enfant', 'Charité', 'Bénévolat', 'Parrainage'];

const   Gallery: React.FC = () => {
  const { t } = useTranslation();



  const [currentPage, _setCurrentPage] = useState(0);
  const [itemsPerPage, _setItemsPerPage] = useState(6);
  const [sort, _setSort] = useState('id,desc'); // Default sort as a single string

 
 

  const selectedLanguage = useSelector((state: RootState) => state.language.language); // Get selected language from Redux store
  const { data } = useGetPaginatedType_image_image_storeAllOneQuery({ languageName:selectedLanguage, page: currentPage, size: itemsPerPage, sort });
  
  const { data:defaultData } = useGetPaginatedType_image_image_storeAllOneQuery({ languageName:'French', page: currentPage, size: itemsPerPage, sort });
  const [typeContent, setTypeContent] = useState<GalleryItemData[]>([]);

  const { data:type } = useGetAllTypeImageTranslateDtosQuery( selectedLanguage);
  
  const  typeImag = (type as unknown as MyResponseType)?.data || [];

  const categories = typeImag.map((item: TypeImageTranslateDto) => item.typeTranslate);
  
  useEffect(() => {
    if (data) {
      const fetchedData = (data as unknown as MyResponse)?.data || [];
      
      if (fetchedData.length === 0 && selectedLanguage !== 'French') {
        // If no content is found for the selected language, fall back to the default language (English)
        const fallbackData = (defaultData as unknown as MyResponse)?.data || [];
        setTypeContent(fallbackData);
      } else {
        setTypeContent(fetchedData);
      }
    } else if (defaultData) {
      // In case the initial data request fails but fallback data is available
      const fallbackData = (defaultData as unknown as MyResponse)?.data || [];
      setTypeContent(fallbackData);
    }
  }, [data, defaultData, selectedLanguage]);

  
  const [selectedCategory, setSelectedCategory] = useState<string>('tous');

  const filteredItems = selectedCategory === 'tous'
    ? typeContent
    : typeContent.filter(item => item.typeTranslate === selectedCategory);

  return (

    <div className="py-10 px-6 bg-gray-100 dark:bg-gray-600">
      <div className="container mx-auto text-center dark:text-white">
        <h2 className="text-4xl font-semibold mb-6">             {t('post.Our Gallery') || ''}
        </h2>
        <div className="mb-6">
          {categories.map(category => (
            
            <button
              key={category}
              onClick={() => setSelectedCategory(category)}
              className={`px-4 py-2 m-1 rounded-lg font-semibold ${selectedCategory === category ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}
            >
              {category}
            </button>
          ))}
        </div>
        <div className="flex flex-wrap justify-center">
          {filteredItems.map((item, index) => (
            <GalleryItem
              key={index}
              title={item.typeTranslate}
              imageUrl={item.imageStoreUrl}
            />
          ))}
        </div>
      </div>
    </div>
  );
};

export default Gallery;
