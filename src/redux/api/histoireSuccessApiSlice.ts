import apiServices from "../../common/apiServices";

// Define the interface for Histoire Success
export interface HistoireSuccess {
  id: number;
  title: string;
  description: any;
}

// Define the DTO interface for Histoire Success
export interface HistoireSuccessDto {
  id: number;
  title: string;
  description: any;
  languageId: number;
  languageName: string;
}

// Define the tag types
export const HISTOIRE_SUCCESS_TAGS = ['HistoireSuccess'] as const;

// Enhance the API service with additional tag types
const histoireSuccessApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: HISTOIRE_SUCCESS_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all histoire successes
      getAllHistoireSuccess: builder.query<HistoireSuccess[], void>({
        query: () => ({
          url: '/histoire-success',
          method: 'GET',
        }),
        providesTags: [HISTOIRE_SUCCESS_TAGS[0]], // Tag for the list of histoire successes
      }),
      // Endpoint to fetch a specific histoire success by ID
      getHistoireSuccessById: builder.query<HistoireSuccess, number>({
        query: (id) => ({
          url: `/histoire-success/${id}`,
          method: 'GET',
        }),
        providesTags: (result, error, id) => [{ type: HISTOIRE_SUCCESS_TAGS[0], id }], // Tag for individual histoire success
      }),
      // Endpoint to fetch all histoire successes as DTOs
      getAllHistoireSuccessDto: builder.query<HistoireSuccessDto[], void>({
        query: () => ({
          url: '/histoire-successDtoAll',
          method: 'GET',
        }),
        providesTags: [HISTOIRE_SUCCESS_TAGS[0]], // Tag for the list of histoire success DTOs
      }),
      // Endpoint to fetch all histoire successes with extended details
      getAllHistoireSuccessAll: builder.query<HistoireSuccessDto[], void>({
        query: () => ({
          url: '/histoire-successAll',
          method: 'GET',
        }),
        providesTags: [HISTOIRE_SUCCESS_TAGS[0]], // Tag for the list of all histoire successes
      }),
      // Endpoint to create a new histoire success
      createHistoireSuccess: builder.mutation<HistoireSuccess, { title: string; description: string; languageId: number }>({
        query: ({ title, description, languageId }) => ({
          url: `/histoire-success/${languageId}`,
          method: 'POST',
          data: { title, description },
        }),
        invalidatesTags: [HISTOIRE_SUCCESS_TAGS[0]], // Invalidate the entire list of histoire successes
      }),
      // Endpoint to update an existing histoire success by ID
      updateHistoireSuccess: builder.mutation<HistoireSuccess, { id: number; data: Partial<HistoireSuccess> }>({
        query: ({ id, data }) => ({
          url: `/histoire-success/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [HISTOIRE_SUCCESS_TAGS[0]], // Invalidate the entire list of histoire successes
      }),
      // Endpoint to delete an histoire success by ID
      deleteHistoireSuccess: builder.mutation<void, number>({
        query: (id) => ({
          url: `/histoire-success/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [HISTOIRE_SUCCESS_TAGS[0]], // Invalidate the entire list of histoire successes
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllHistoireSuccessQuery,
  useGetHistoireSuccessByIdQuery,
  useGetAllHistoireSuccessDtoQuery,
  useGetAllHistoireSuccessAllQuery,
  useCreateHistoireSuccessMutation,
  useUpdateHistoireSuccessMutation,
  useDeleteHistoireSuccessMutation,
} = histoireSuccessApiSlice;

// Default export for the slice
export default histoireSuccessApiSlice;
