import apiServices from "../../common/apiServices";

// Define the interface for Mission
export interface Mission {
  id: number;
  title: string;
  description: any;
}
// Define the DTO interface for About Us
export interface MissionDto {
  id: number;
  title: string;
  description: any;
  languageId: number;
  languageName: string;
  imageProfileId: number;
  imageData: any; // Use Uint8Array for binary data
}

// Define the tag types
export const MISSION_TAGS = ['Missions'] as const;

// Enhance the API service with additional tag types
const missionsApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: MISSION_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all missions
      getAllMissions: builder.query<MissionDto[], void>({
        query: () => ({
          url: '/missionsAll',
          method: 'GET',
        }),
        providesTags: [MISSION_TAGS[0]], // Tag for the list of missions
      }),
      // Endpoint to fetch a specific mission by ID
      getMissionById: builder.query<Mission, number>({
        query: (id) => ({
          url: `/mission/${id}`,
          method: 'GET',
        }),
        providesTags: (result, error, id) => [{ type: MISSION_TAGS[0], id }], // Tag for individual mission
      }),
      // Endpoint to create a new mission
      createMission: builder.mutation<Mission, { languageId: any; imageProfileId: any; data: Partial<Mission> }>({
        query: ({ languageId, imageProfileId, data }) => ({
          url: `/mission?languageId=${languageId}&imageProfileId=${imageProfileId}`, // Add query parameters to the URL
          method: 'POST',
          data: data,
        }),
        invalidatesTags: [MISSION_TAGS[0]], // Invalidate the entire list of missions
      }),
      // Endpoint to update an existing mission by ID
      updateMission: builder.mutation<Mission, { id: number; data: Partial<Mission> }>({
        query: ({ id, data }) => ({
          url: `/mission/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [MISSION_TAGS[0]], // Invalidate the entire list of missions
      }),
      //
      // Endpoint to delete a mission by ID
      deleteMission: builder.mutation<void, number>({
        query: (id) => ({
          url: `/mission/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [MISSION_TAGS[0]], // Invalidate the entire list of missions
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllMissionsQuery,
  useGetMissionByIdQuery,
  useCreateMissionMutation,
  useUpdateMissionMutation,
  useDeleteMissionMutation,
} = missionsApiSlice;

// Default export for the slice
export default missionsApiSlice;
