import apiServices from "../../common/apiServices";

// Define the interface for TypeImage
export interface TypeImage {
  id: number;
  type: string;
}

// Define the tag types
export const TYPE_IMAGE_TAGS = ['TypeImages'] as const;

// Enhance the API service with additional tag types
const typeImagesApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: TYPE_IMAGE_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all type images
      getAllTypeImages: builder.query<TypeImage[], void>({
        query: () => ({
          url: '/type-images',
          method: 'GET',
        }),
        providesTags: [TYPE_IMAGE_TAGS[0]], // Tag for the list of type images
      }),
      // Endpoint to fetch a single type image by ID
      getTypeImageById: builder.query<TypeImage, number>({
        query: (id) => ({
          url: `/type-images/${id}`,
          method: 'GET',
        }),
        providesTags: (result, error, id) => [{ type: TYPE_IMAGE_TAGS[0], id }], // Tag for individual type image
      }),
      // Endpoint to create a new type image
      createTypeImage: builder.mutation<TypeImage, Partial<TypeImage>>({
        query: (newTypeImage) => ({
          url: '/type-images',
          method: 'POST',
          data: newTypeImage,
        }),
        invalidatesTags: [TYPE_IMAGE_TAGS[0]], // Invalidate the entire list of type images
      }),
      // Endpoint to update an existing type image
      updateTypeImage: builder.mutation<TypeImage, { id: number; data: Partial<TypeImage> }>({
        query: ({ id, data }) => ({
          url: `/type-images/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [TYPE_IMAGE_TAGS[0]], // Invalidate the entire list of type images
      }),
      // Endpoint to delete a type image by ID
      deleteTypeImage: builder.mutation<void, number>({
        query: (id) => ({
          url: `/type-images/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [TYPE_IMAGE_TAGS[0]], // Invalidate the entire list of type images
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllTypeImagesQuery,
  useGetTypeImageByIdQuery,
  useCreateTypeImageMutation,
  useUpdateTypeImageMutation,
  useDeleteTypeImageMutation,
} = typeImagesApiSlice;

// Default export for the slice
export default typeImagesApiSlice;
