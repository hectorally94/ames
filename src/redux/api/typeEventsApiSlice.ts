import apiServices from "../../common/apiServices";

// Define the interface for TypeEvent
export interface TypeEvent {
  id: number;
  type: string;
}

// Define the tag types
export const TYPE_EVENT_TAGS = ['TypeEvents'] as const;

// Enhance the API service with additional tag types
const typeEventsApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: TYPE_EVENT_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all type events
      getAllTypeEvents: builder.query<TypeEvent[], void>({
        query: () => ({
          url: '/type-events',
          method: 'GET',
        }),
        providesTags: [TYPE_EVENT_TAGS[0]], // Tag for the list of type events
      }),
      // Endpoint to fetch a specific type event by ID
      getTypeEventById: builder.query<TypeEvent, number>({
        query: (id) => ({
          url: `/type-events/${id}`,
          method: 'GET',
        }),
        providesTags: (result, error, id) => [{ type: TYPE_EVENT_TAGS[0], id }], // Tag for individual type event
      }),
      // Endpoint to create a new type event
      createTypeEvent: builder.mutation<TypeEvent, Partial<TypeEvent>>({
        query: (newTypeEvent) => ({
          url: '/type-events',
          method: 'POST',
          data: newTypeEvent,
        }),
        invalidatesTags: [TYPE_EVENT_TAGS[0]], // Invalidate the entire list of type events
      }),
      // Endpoint to update an existing type event by ID
      updateTypeEvent: builder.mutation<TypeEvent, { id: number; data: Partial<TypeEvent> }>({
        query: ({ id, data }) => ({
          url: `/type-events/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [TYPE_EVENT_TAGS[0]], // Invalidate the entire list of type events
      }),
      // Endpoint to delete a type event by ID
      deleteTypeEvent: builder.mutation<void, number>({
        query: (id) => ({
          url: `/type-events/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [TYPE_EVENT_TAGS[0]], // Invalidate the entire list of type events
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllTypeEventsQuery,
  useGetTypeEventByIdQuery,
  useCreateTypeEventMutation,
  useUpdateTypeEventMutation,
  useDeleteTypeEventMutation,
} = typeEventsApiSlice;

// Default export for the slice
export default typeEventsApiSlice;
