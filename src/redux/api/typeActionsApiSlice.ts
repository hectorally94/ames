import apiServices from "../../common/apiServices";

// Define the interface for TypeAction
export interface TypeAction {
  id: number;
  type: any;
}

// Define the tag types
export const TYPE_ACTION_TAGS = ['TypeActions'] as const;

// Enhance the API service with additional tag types
const typeActionsApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: TYPE_ACTION_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all type actions
      getAllTypeActions: builder.query<TypeAction[], void>({
        query: () => ({
          url: '/type-actions',
          method: 'GET',
        }),
        providesTags: [TYPE_ACTION_TAGS[0]], // Tag for the list of type actions
      }),
      // Endpoint to fetch a specific type action by ID
      getTypeActionById: builder.query<TypeAction, number>({
        query: (id) => ({
          url: `/type-actions/${id}`,
          method: 'GET',
        }),
        providesTags: (result, error, id) => [{ type: TYPE_ACTION_TAGS[0], id }], // Tag for individual type action
      }),
      // Endpoint to create a new type action
      createTypeAction: builder.mutation<TypeAction, Partial<TypeAction>>({
        query: (newTypeAction) => ({
          url: '/type-actions',
          method: 'POST',
          data: newTypeAction,
        }),
        invalidatesTags: [TYPE_ACTION_TAGS[0]], // Invalidate the entire list of type actions
      }),
      // Endpoint to update an existing type action by ID
      updateTypeAction: builder.mutation<TypeAction, { id: number; data: Partial<TypeAction> }>({
        query: ({ id, data }) => ({
          url: `/type-actions/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [TYPE_ACTION_TAGS[0]], // Invalidate the entire list of type actions
      }),
      // Endpoint to delete a type action by ID
      deleteTypeAction: builder.mutation<void, number>({
        query: (id) => ({
          url: `/type-actions/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [TYPE_ACTION_TAGS[0]], // Invalidate the entire list of type actions
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllTypeActionsQuery,
  useGetTypeActionByIdQuery,
  useCreateTypeActionMutation,
  useUpdateTypeActionMutation,
  useDeleteTypeActionMutation,
} = typeActionsApiSlice;

// Default export for the slice
export default typeActionsApiSlice;
