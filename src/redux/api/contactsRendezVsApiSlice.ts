import apiServices from "../../common/apiServices";

// Define the interface for Contact
export interface Contact {
  id: number;
  fullName: string;
  email: string;
  tel: string;
  sujet: string;
  message: string;
  dateCreated:string;
}

// Define the tag types
export const CONTACTS_TAGS_Rendes_vs = ['RendzVous'] as const;

// Enhance the API service with additional tag types
const contactsRendezVsApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: CONTACTS_TAGS_Rendes_vs,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all contacts
      getAllContactsR: builder.query<Contact[], void>({
        query: () => ({
          url: '/contactsRendzVous',
          method: 'GET',
        }),
        providesTags: [CONTACTS_TAGS_Rendes_vs[0]], // Tag for the list of contacts
      }),
      // Endpoint to fetch a specific contact by ID
      getContactRById: builder.query<Contact, number>({
        query: (id) => ({
          url: `/contactsRendzVous/${id}`,
          method: 'GET',
        }),
        providesTags: (_result, _error, id) => [{ type: CONTACTS_TAGS_Rendes_vs[0], id }], // Tag for individual contact
      }),
      // Endpoint to create a new contact
      createContactR: builder.mutation<Contact, Omit<Contact, 'id' | 'dateCreated'>>({
        query: (contact) => ({
          url: '/contactsRendzVous',
          method: 'POST',
          data: contact,
        }),
        invalidatesTags: [CONTACTS_TAGS_Rendes_vs[0]], // Invalidate the entire list of contacts
      }),
      // Endpoint to update an existing contact by ID
      updateContactR: builder.mutation<Contact, { id: number; data: Partial<Contact> }>({
        query: ({ id, data }) => ({
          url: `/contactsRendzVous/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [CONTACTS_TAGS_Rendes_vs[0]], // Invalidate the entire list of contacts
      }),
      // Endpoint to delete a contact by ID
      deleteContactR: builder.mutation<void, number>({
        query: (id) => ({
          url: `/contactsRendzVous/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [CONTACTS_TAGS_Rendes_vs[0]], // Invalidate the entire list of contacts
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllContactsRQuery,
  useGetContactRByIdQuery,
  useCreateContactRMutation,
  useUpdateContactRMutation,
  useDeleteContactRMutation,
} = contactsRendezVsApiSlice;

// Default export for the slice
export default contactsRendezVsApiSlice;
