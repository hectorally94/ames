import apiServices from "../../common/apiServices";

// Define the interface for CategoryBlog
export interface CategoryBlog {
  id: number;
  categoryName: string;
}

// Define the tag types
export const CATEGORY_BLOG_TAGS = ['CategoryBlog'] as const;

// Enhance the API service with additional tag types
const categoryBlogApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: CATEGORY_BLOG_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all category blogs
      getAllCategoryBlogs: builder.query<CategoryBlog[], void>({
        query: () => ({
          url: '/category-blogs',
          method: 'GET',
        }),
        providesTags: [CATEGORY_BLOG_TAGS[0]], // Tag for the list of category blogs
      }),
      // Endpoint to fetch a specific category blog by ID
      getCategoryBlogById: builder.query<CategoryBlog, number>({
        query: (id) => ({
          url: `/category-blogs/${id}`,
          method: 'GET',
        }),
        providesTags: (result, error, id) => [{ type: CATEGORY_BLOG_TAGS[0], id }], // Tag for individual category blog
      }),
      // Endpoint to create a new category blog
      createCategoryBlog: builder.mutation<CategoryBlog, CategoryBlog>({
        query: (data) => ({
          url: '/category-blogs',
          method: 'POST',
          data: data,
        }),
        invalidatesTags: [CATEGORY_BLOG_TAGS[0]], // Invalidate the entire list of category blogs
      }),
      // Endpoint to update an existing category blog by ID
      updateCategoryBlog: builder.mutation<CategoryBlog, { id: number; data: Partial<CategoryBlog> }>({
        query: ({ id, data }) => ({
          url: `/category-blogs/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [CATEGORY_BLOG_TAGS[0]], // Invalidate the entire list of category blogs
      }),
      // Endpoint to delete a category blog by ID
      deleteCategoryBlog: builder.mutation<void, number>({
        query: (id) => ({
          url: `/category-blogs/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [CATEGORY_BLOG_TAGS[0]], // Invalidate the entire list of category blogs
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllCategoryBlogsQuery,
  useGetCategoryBlogByIdQuery,
  useCreateCategoryBlogMutation,
  useUpdateCategoryBlogMutation,
  useDeleteCategoryBlogMutation,
} = categoryBlogApiSlice;

// Default export for the slice
export default categoryBlogApiSlice;
