import apiServices from "../../common/apiServices";

// Define the interface for CategoryAction
export interface CategoryAction {
  id: number;
  categoryName: string;
}

// Define the tag types
export const CATEGORY_ACTION_TAGS = ['CategoryAction'] as const;

// Enhance the API service with additional tag types
const categoryActionApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: CATEGORY_ACTION_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all category actions
      getAllCategoryActions: builder.query<CategoryAction[], void>({
        query: () => ({
          url: '/category-actions',
          method: 'GET',
        }),
        providesTags: [CATEGORY_ACTION_TAGS[0]], // Tag for the list of category actions
      }),
      // Endpoint to fetch a specific category action by ID
      getCategoryActionById: builder.query<CategoryAction, number>({
        query: (id) => ({
          url: `/category-actions/${id}`,
          method: 'GET',
        }),
        providesTags: (result, error, id) => [{ type: CATEGORY_ACTION_TAGS[0], id }], // Tag for individual category action
      }),
      // Endpoint to create a new category action
      createCategoryAction: builder.mutation<CategoryAction, CategoryAction>({
        query: (data) => ({
          url: '/category-actions',
          method: 'POST',
          data: data,
        }),
        invalidatesTags: [CATEGORY_ACTION_TAGS[0]], // Invalidate the entire list of category actions
      }),
      // Endpoint to update an existing category action by ID
      updateCategoryAction: builder.mutation<CategoryAction, { id: number; data: Partial<CategoryAction> }>({
        query: ({ id, data }) => ({
          url: `/category-actions/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [CATEGORY_ACTION_TAGS[0]], // Invalidate the entire list of category actions
      }),
      // Endpoint to delete a category action by ID
      deleteCategoryAction: builder.mutation<void, number>({
        query: (id) => ({
          url: `/category-actions/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [CATEGORY_ACTION_TAGS[0]], // Invalidate the entire list of category actions
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllCategoryActionsQuery,
  useGetCategoryActionByIdQuery,
  useCreateCategoryActionMutation,
  useUpdateCategoryActionMutation,
  useDeleteCategoryActionMutation,
} = categoryActionApiSlice;

// Default export for the slice
export default categoryActionApiSlice;
