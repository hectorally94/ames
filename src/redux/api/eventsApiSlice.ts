import apiServices from "../../common/apiServices";

// Define the interfaces for Event and related types
interface PaginatedResponse<T> {
  data: T[];
  currentPage: number;
  totalItems: number;
  totalPages: number;
}

export interface Event {
  id: number;
  title: string;
  objectif: string;
  recolte: string;
  description: string;
  date:string;
}

// Define the DTO interface for Event
export interface EventDto {
  id: number;
  title: string;
  objectif: string;
  recolte: string;
  description: string;
  date:string;
  
  typeActionsTranslateId: number;
  typeActionsTranslate: string;
  languageId: number;
  languageName: string;
  categoryTranslateId: number;
  categoryTranslate: string;
  clanguageId: number;
  clanguageName: string;
  storeImageId: number;
  storeImageName: string;
  storeImageType: string;
  imagedata: any;

}

// Define the tag types
export const EVENTS_TAGS = ['Event'] as const;

// Enhance the API service with additional tag types
const eventsApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: EVENTS_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all events
      getAllEvents: builder.query<Event[], void>({
        query: () => ({
          url: '/eventsAll',
          method: 'GET',
        }),
        providesTags: [EVENTS_TAGS[0]], // Tag for the list of events
      }),
         // Endpoint to fetch paginated actions with optional title filtering
    getPaginatedEvents: builder.query<PaginatedResponse<EventDto>, { title?: string; page?: number; size?: number; sort?: string }>({
      query: ({ title = '', page = 0, size = 2, sort = 'id,desc' }) => ({
        url: '/eventsAllPageByTitle',
        params: { title, page, size, sort },
        method: 'GET',
      }),
      providesTags: [EVENTS_TAGS[0]], // Tag for the list of actions
    }),
      // Endpoint to fetch a specific event by ID
      getEventById: builder.query<Event, number>({
        query: (id) => ({
          url: `/events/${id}`,
          method: 'GET',
        }),
        providesTags: (result, error, id) => [{ type: EVENTS_TAGS[0], id }], // Tag for individual event
      }),
      // Endpoint to create a new event
      createEvent: builder.mutation<Event, { 
        typeEventsTranslateId: any;
        categoryTranslateId: any;
        storeImageId: any;
        data: Partial<Event>
      }>({
        query: ({ typeEventsTranslateId, categoryTranslateId, storeImageId, data }) => ({
          url: `/events/${typeEventsTranslateId}/${categoryTranslateId}/${storeImageId}`,
          method: 'POST',
          data: data,
        }),
        invalidatesTags: [EVENTS_TAGS[0]], // Invalidate the entire list of events
      }),
      // Endpoint to update an existing event by ID
      updateEvent: builder.mutation<Event, { id: any; data: Partial<Event> }>({
        query: ({ id, data }) => ({
          url: `/events/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [EVENTS_TAGS[0]], // Invalidate the entire list of events
      }),
      // Endpoint to delete an event by ID
      deleteEvent: builder.mutation<void, number>({
        query: (id) => ({
          url: `/events/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [EVENTS_TAGS[0]], // Invalidate the entire list of events
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetPaginatedEventsQuery,
  useGetAllEventsQuery,
  useGetEventByIdQuery,
  useCreateEventMutation,
  useUpdateEventMutation,
  useDeleteEventMutation,
} = eventsApiSlice;

// Default export for the slice
export default eventsApiSlice;
