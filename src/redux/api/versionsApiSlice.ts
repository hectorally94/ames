import apiServices from "../../common/apiServices";

// Define the interface for Versions
export interface Versions {
  id: number;
  versionName: string;
}

// Define the tag types
export const VERSIONS_TAGS = ['Versions'] as const;

// Enhance the API service with additional tag types
const versionsApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: VERSIONS_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all versions
      getAllVersions: builder.query<Versions[], void>({
        query: () => ({
          url: '/versions',
          method: 'GET',
        }),
        providesTags: [VERSIONS_TAGS[0]], // Tag for the list of versions
      }),
      // Endpoint to fetch a single version by ID
      getVersionById: builder.query<Versions, number>({
        query: (id) => ({
          url: `/versions/${id}`,
          method: 'GET',
        }),
        providesTags: (result, error, id) => [{ type: VERSIONS_TAGS[0], id }], // Tag for individual version
      }),
      // Endpoint to create a new version
      createVersion: builder.mutation<Versions, Partial<Versions>>({
        query: (newVersion) => ({
          url: '/versions',
          method: 'POST',
          data: newVersion,
        }),
        invalidatesTags: [VERSIONS_TAGS[0]], // Invalidate the entire list of versions
      }),
      // Endpoint to update an existing version
      updateVersion: builder.mutation<Versions, { id: number; data: Partial<Versions> }>({
        query: ({ id, data }) => ({
          url: `/versions/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [VERSIONS_TAGS[0]], // Invalidate the entire list of versions
      }),
      // Endpoint to delete a version by ID
      deleteVersion: builder.mutation<void, number>({
        query: (id) => ({
          url: `/versions/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [VERSIONS_TAGS[0]], // Invalidate the entire list of versions
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllVersionsQuery,
  useGetVersionByIdQuery,
  useCreateVersionMutation,
  useUpdateVersionMutation,
  useDeleteVersionMutation,
} = versionsApiSlice;

// Default export for the slice
export default versionsApiSlice;
