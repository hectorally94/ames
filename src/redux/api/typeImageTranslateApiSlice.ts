import apiServices from "../../common/apiServices";

// Define the interfaces for TypeImageTranslate and TypeImageTranslateDto
export interface TypeImageTranslate {
  id: number;
  typeTranslate: string;
}

export interface TypeImageTranslateDto {
  id: number;
  typeTranslate: string;
  languageId: number;
  languageName: string;
}

// Define the tag types
export const TYPE_IMAGE_TRANSLATE_TAGS = ['TypeImageTranslates'] as const;

// Enhance the API service with additional tag types
const typeImageTranslateApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: TYPE_IMAGE_TRANSLATE_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all type image translates
      getAllTypeImageTranslates: builder.query<TypeImageTranslate[], void>({
        query: () => ({
          url: '/type-image-translate',
          method: 'GET',
        }),
        providesTags: [TYPE_IMAGE_TRANSLATE_TAGS[0]], // Tag for the list of type image translates
      }),
      // Endpoint to fetch a specific type image translate by ID
      getTypeImageTranslateById: builder.query<TypeImageTranslate, number>({
        query: (id) => ({
          url: `/type-image-translate/${id}`,
          method: 'GET',
        }),
        providesTags: (result, error, id) => [{ type: TYPE_IMAGE_TRANSLATE_TAGS[0], id }], // Tag for individual type image translate
      }),
      // Endpoint to fetch all type image translate DTOs
      getAllTypeImageTranslateDtos: builder.query<TypeImageTranslateDto[], void>({
        query: () => ({
          url: '/type-image-translateDtoAll',
          method: 'GET',
        }),
        providesTags: [TYPE_IMAGE_TRANSLATE_TAGS[0]], // Tag for the list of type image translate DTOs
      }),
      // Endpoint to fetch all type image translate records
      getAllTypeImageTranslateRecords: builder.query<TypeImageTranslateDto[], void>({
        query: () => ({
          url: '/type-image-translateAll',
          method: 'GET',
        }),
        providesTags: [TYPE_IMAGE_TRANSLATE_TAGS[0]], // Tag for the list of type image translates
      }),
      // Endpoint to create a new type image translate
      createTypeImageTranslate: builder.mutation<TypeImageTranslate, { languageId: number; data: Partial<TypeImageTranslate> }>({
        query: ({ languageId, data }) => ({
          url: `/${languageId}/type-image-translate`,
          method: 'POST',
          data: data,
        }),
        invalidatesTags: [TYPE_IMAGE_TRANSLATE_TAGS[0]], // Invalidate the entire list of type image translates
      }),
      // Endpoint to update an existing type image translate by ID
      updateTypeImageTranslate: builder.mutation<TypeImageTranslate, { id: number; data: Partial<TypeImageTranslate> }>({
        query: ({ id, data }) => ({
          url: `/type-image-translate/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [TYPE_IMAGE_TRANSLATE_TAGS[0]], // Invalidate the entire list of type image translates
      }),
      // Endpoint to delete a type image translate by ID
      deleteTypeImageTranslate: builder.mutation<void, number>({
        query: (id) => ({
          url: `/type-image-translate/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [TYPE_IMAGE_TRANSLATE_TAGS[0]], // Invalidate the entire list of type image translates
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllTypeImageTranslatesQuery,
  useGetTypeImageTranslateByIdQuery,
  useGetAllTypeImageTranslateDtosQuery,
  useGetAllTypeImageTranslateRecordsQuery,
  useCreateTypeImageTranslateMutation,
  useUpdateTypeImageTranslateMutation,
  useDeleteTypeImageTranslateMutation,
} = typeImageTranslateApiSlice;

// Default export for the slice
export default typeImageTranslateApiSlice;
