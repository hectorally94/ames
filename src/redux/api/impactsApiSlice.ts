import apiServices from "../../common/apiServices";

// Define the interface for Impact
export interface Impact {
  id: number;
  title: string;
  description: any;
}

// Define the DTO interface for Impact
export interface ImpactDto {
  id: number;
  title: string;
  description: any;
  languageId: number;
  languageName: string;
}

// Define the tag types
export const IMPACT_TAGS = ['Impacts'] as const;

// Enhance the API service with additional tag types
const impactsApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: IMPACT_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all impacts
      getAllImpacts: builder.query<Impact[], void>({
        query: () => ({
          url: '/impacts',
          method: 'GET',
        }),
        providesTags: [IMPACT_TAGS[0]], // Tag for the list of impacts
      }),
      // Endpoint to fetch a specific impact by ID
      getImpactById: builder.query<Impact, number>({
        query: (id) => ({
          url: `/impacts/${id}`,
          method: 'GET',
        }),
        providesTags: (result, error, id) => [{ type: IMPACT_TAGS[0], id }], // Tag for individual impact
      }),
      // Endpoint to fetch all impacts as DTOs
      getAllImpactsDto: builder.query<ImpactDto[], void>({
        query: () => ({
          url: '/impactsDtoAll',
          method: 'GET',
        }),
        providesTags: [IMPACT_TAGS[0]], // Tag for the list of impact DTOs
      }),
      // Endpoint to fetch all impacts with extended details
      getAllImpactsAll: builder.query<ImpactDto[], void>({
        query: () => ({
          url: '/impactsAll',
          method: 'GET',
        }),
        providesTags: [IMPACT_TAGS[0]], // Tag for the list of all impacts
      }),
      // Endpoint to create a new impact
      createImpact: builder.mutation<Impact, { title: string; description: string; languageId: number }>({
        query: ({ title, description, languageId }) => ({
          url: `/impacts/${languageId}`,
          method: 'POST',
          data: { title, description },
        }),
        invalidatesTags: [IMPACT_TAGS[0]], // Invalidate the entire list of impacts
      }),
      // Endpoint to update an existing impact by ID
      updateImpact: builder.mutation<Impact, { id: number; data: Partial<Impact> }>({
        query: ({ id, data }) => ({
          url: `/impacts/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [IMPACT_TAGS[0]], // Invalidate the entire list of impacts
      }),
      // Endpoint to delete an impact by ID
      deleteImpact: builder.mutation<void, number>({
        query: (id) => ({
          url: `/impacts/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [IMPACT_TAGS[0]], // Invalidate the entire list of impacts
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllImpactsQuery,
  useGetImpactByIdQuery,
  useGetAllImpactsDtoQuery,
  useGetAllImpactsAllQuery,
  useCreateImpactMutation,
  useUpdateImpactMutation,
  useDeleteImpactMutation,
} = impactsApiSlice;

// Default export for the slice
export default impactsApiSlice;
