import apiServices from "../../common/apiServices";

// Define the interfaces for Participable and ParticipableDto
export interface Participable {
  id: number;
  description: string;
}

export interface ParticipableDto {
  id: number;
  description: string;
  languageId: number;
  name: string;
}

// Define the tag types
export const PARTICIPABLE_TAGS = ['Participables'] as const;

// Enhance the API service with additional tag types
const participablesApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: PARTICIPABLE_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all participables
      getAllParticipables: builder.query<Participable[], void>({
        query: () => ({
          url: '/participables',
          method: 'GET',
        }),
        providesTags: [PARTICIPABLE_TAGS[0]], // Tag for the list of participables
      }),
      // Endpoint to fetch a specific participable by ID
      getParticipableById: builder.query<Participable, number>({
        query: (id) => ({
          url: `/participables/${id}`,
          method: 'GET',
        }),
        providesTags: (result, error, id) => [{ type: PARTICIPABLE_TAGS[0], id }], // Tag for individual participable
      }),
      // Endpoint to fetch all participable DTOs
      getAllParticipablesDtos: builder.query<ParticipableDto[], void>({
        query: () => ({
          url: '/participablesDtoAll',
          method: 'GET',
        }),
        providesTags: [PARTICIPABLE_TAGS[0]], // Tag for the list of participable DTOs
      }),
      // Endpoint to fetch all participable records
      getAllParticipablesRecords: builder.query<Participable[], void>({
        query: () => ({
          url: '/participablesAll',
          method: 'GET',
        }),
        providesTags: [PARTICIPABLE_TAGS[0]], // Tag for the list of participables
      }),
      // Endpoint to create a new participable
      createParticipable: builder.mutation<Participable, { languageId: number; data: Partial<Participable> }>({
        query: ({ languageId, data }) => ({
          url: `/${languageId}/participables`,
          method: 'POST',
          data: data,
        }),
        invalidatesTags: [PARTICIPABLE_TAGS[0]], // Invalidate the entire list of participables
      }),
      // Endpoint to update an existing participable by ID
      updateParticipable: builder.mutation<Participable, { id: number; data: Partial<Participable> }>({
        query: ({ id, data }) => ({
          url: `/participables/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [PARTICIPABLE_TAGS[0]], // Invalidate the entire list of participables
      }),
      // Endpoint to delete a participable by ID
      deleteParticipable: builder.mutation<void, number>({
        query: (id) => ({
          url: `/participables/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [PARTICIPABLE_TAGS[0]], // Invalidate the entire list of participables
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllParticipablesQuery,
  useGetParticipableByIdQuery,
  useGetAllParticipablesDtosQuery,
  useGetAllParticipablesRecordsQuery,
  useCreateParticipableMutation,
  useUpdateParticipableMutation,
  useDeleteParticipableMutation,
} = participablesApiSlice;

// Default export for the slice
export default participablesApiSlice;
