import apiServices from "../../common/apiServices";

// Define the interface for Voluntaires
export interface Voluntaires {
  id: number;
  fullName: string;
  tel: string;
  adress1: string;
  adress2: string;
  dateCreated: any;
}

// Define the tag types
export const VOLUNTAIRES_TAGS = ['Voluntaires'] as const;

// Enhance the API service with additional tag types
const volontairesApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: VOLUNTAIRES_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all volontaires
      getAllVolontaires: builder.query<Voluntaires[], void>({
        query: () => ({
          url: '/voluntaires',
          method: 'GET',
        }),
        providesTags: [VOLUNTAIRES_TAGS[0]], // Tag for the list of volontaires
      }),
      // Endpoint to fetch a single volontaire by ID
      getVolontaireById: builder.query<Voluntaires, number>({
        query: (id) => ({
          url: `/voluntaires/${id}`,
          method: 'GET',
        }),
        providesTags: (result, error, id) => [{ type: VOLUNTAIRES_TAGS[0], id }], // Tag for individual volontaire
      }),
      // Endpoint to create a new volontaire
      createVolontaire: builder.mutation<Voluntaires, Partial<Voluntaires>>({
        query: (newVolontaire) => ({
          url: '/voluntaires',
          method: 'POST',
          data: newVolontaire,
        }),
        invalidatesTags: [VOLUNTAIRES_TAGS[0]], // Invalidate the entire list of volontaires
      }),
      // Endpoint to update an existing volontaire
      updateVolontaire: builder.mutation<Voluntaires, { id: number; data: Partial<Voluntaires> }>({
        query: ({ id, data }) => ({
          url: `/voluntaires/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [VOLUNTAIRES_TAGS[0]], // Invalidate the entire list of volontaires
      }),
      // Endpoint to delete a volontaire by ID
      deleteVolontaire: builder.mutation<void, number>({
        query: (id) => ({
          url: `/voluntaires/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [VOLUNTAIRES_TAGS[0]], // Invalidate the entire list of volontaires
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllVolontairesQuery,
  useGetVolontaireByIdQuery,
  useCreateVolontaireMutation,
  useUpdateVolontaireMutation,
  useDeleteVolontaireMutation,
} = volontairesApiSlice;

// Default export for the slice
export default volontairesApiSlice;
