import apiServices from "../../common/apiServices";

// Define interfaces for Welcomes and WelcomesDto
export interface Welcomes {
  id: number;
  title: string;
  description: any;
}

export interface WelcomesDto {
  id: number;
  title: string;
  description: any;
  languageId: number;
  languageName: string;
}

// Define the tag types
export const WELCOMES_TAGS = ['Welcomes'] as const;

// Enhance the API service with additional tag types
const welcomesApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: WELCOMES_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all welcomes
      getAllWelcomes: builder.query<Welcomes[], void>({
        query: () => ({
          url: '/welcomes',
          method: 'GET',
        }),
        providesTags: [WELCOMES_TAGS[0]], // Tag for the list of welcomes
      }),
      // Endpoint to fetch all welcomesDto
      getAllWelcomesDto: builder.query<WelcomesDto[], void>({
        query: () => ({
          url: '/welcomesDtoAll',
          method: 'GET',
        }),
        providesTags: [WELCOMES_TAGS[0]], // Tag for the list of welcomesDto
      }),
      // Endpoint to fetch all welcomes with a detailed view
      getAllWelcomesDetailed: builder.query<Welcomes[], void>({
        query: () => ({
          url: '/welcomesAll',
          method: 'GET',
        }),
        providesTags: [WELCOMES_TAGS[0]], // Tag for the list of welcomes with details
      }),
      // Endpoint to fetch a single welcome by ID
      getWelcomeById: builder.query<Welcomes, number>({
        query: (id) => ({
          url: `/welcomes/${id}`,
          method: 'GET',
        }),
        providesTags: (result, error, id) => [{ type: WELCOMES_TAGS[0], id }], // Tag for individual welcome
      }),
      // Endpoint to create a new welcome
      createWelcome: builder.mutation<Welcomes, { languageId: number; data: Partial<Welcomes> }>({
        query: ({ languageId, data }) => ({
          url: `/${languageId}/welcomes`,
          method: 'POST',
          data: data,
        }),
        invalidatesTags: [WELCOMES_TAGS[0]], // Invalidate the entire list of welcomes
      }),
      // Endpoint to update an existing welcome
      updateWelcome: builder.mutation<Welcomes, { id: number; data: Partial<Welcomes> }>({
        query: ({ id, data }) => ({
          url: `/welcomes/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [WELCOMES_TAGS[0]], // Invalidate the entire list of welcomes
      }),
      // Endpoint to delete a welcome by ID
      deleteWelcome: builder.mutation<void, number>({
        query: (id) => ({
          url: `/welcomes/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [WELCOMES_TAGS[0]], // Invalidate the entire list of welcomes
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllWelcomesQuery,
  useGetAllWelcomesDtoQuery,
  useGetAllWelcomesDetailedQuery,
  useGetWelcomeByIdQuery,
  useCreateWelcomeMutation,
  useUpdateWelcomeMutation,
  useDeleteWelcomeMutation,
} = welcomesApiSlice;

// Default export for the slice
export default welcomesApiSlice;
