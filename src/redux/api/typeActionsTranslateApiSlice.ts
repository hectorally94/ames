import apiServices from "../../common/apiServices";

// Define the interfaces for TypeActionsTranslate and TypeActionsTranslateDto
export interface TypeActionsTranslate {
  id: number;
  typeTranslate: string;
}

export interface TypeActionsTranslateDto {
  id: number;
  typeTranslate: string;
  languageId: number;
  languageName: string;
}
// Define the interfaces for Event and related types
interface PaginatedResponse<T> {
  data: T[];
  currentPage: number;
  totalItems: number;
  totalPages: number;
}
// Define the tag types
export const TYPE_ACTIONS_TRANSLATE_TAGS = ['TypeActionsTranslates'] as const;

// Enhance the API service with additional tag types
const typeActionsTranslateApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: TYPE_ACTIONS_TRANSLATE_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
       // Endpoint to fetch paginated actions with optional title filtering
       getAllTypeActionsTranslates: builder.query<PaginatedResponse<TypeActionsTranslateDto>, { name?: string; page?: number; size?: number; sort?: string }>({
      query: ({ name = '', page = 0, size = 15, sort = 'id,desc' }) => ({
        url: '/type-actions-translateDtoAll',
        params: { name, page, size, sort },
        method: 'GET',
      }),
      providesTags: [TYPE_ACTIONS_TRANSLATE_TAGS[0]], // Tag for the list of type actions translates
    }), 
      // Endpoint to fetch a specific type actions translate by ID
      getTypeActionsTranslateById: builder.query<TypeActionsTranslate, number>({
        query: (id) => ({
          url: `/type-actions-translate/${id}`,
          method: 'GET',
        }),
        providesTags: (_result, _error, id) => [{ type: TYPE_ACTIONS_TRANSLATE_TAGS[0], id }], // Tag for individual type actions translate
      }),
      // Endpoint to fetch all type actions translate DTOs
      getAllTypeActionsTranslateDtos: builder.query<TypeActionsTranslateDto[], void>({
        query: () => ({
          url: '/type-actions-translateDtoAll',
          method: 'GET',
        }),
        providesTags: [TYPE_ACTIONS_TRANSLATE_TAGS[0]], // Tag for the list of type actions translate DTOs
      }),
      // Endpoint to fetch all type actions translate records
      getAllTypeActionsTranslateRecords: builder.query<TypeActionsTranslateDto[], void>({
        query: () => ({
          url: '/type-actions-translateAll',
          method: 'GET',
        }),
        providesTags: [TYPE_ACTIONS_TRANSLATE_TAGS[0]], // Tag for the list of type actions translates
      }),
      // Endpoint to create a new type actions translate
      createTypeActionsTranslate: builder.mutation<TypeActionsTranslate, { languageId: number; data: Partial<TypeActionsTranslate> }>({
        query: ({ languageId, data }) => ({
          url: `/${languageId}/type-actions-translate`,
          method: 'POST',
          data: data,
        }),
        invalidatesTags: [TYPE_ACTIONS_TRANSLATE_TAGS[0]], // Invalidate the entire list of type actions translates
      }),
      // Endpoint to update an existing type actions translate by ID
      updateTypeActionsTranslate: builder.mutation<TypeActionsTranslate, { id: number; data: Partial<TypeActionsTranslate> }>({
        query: ({ id, data }) => ({
          url: `/type-actions-translate/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [TYPE_ACTIONS_TRANSLATE_TAGS[0]], // Invalidate the entire list of type actions translates
      }),
      // Endpoint to delete a type actions translate by ID
      deleteTypeActionsTranslate: builder.mutation<void, number>({
        query: (id) => ({
          url: `/type-actions-translate/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [TYPE_ACTIONS_TRANSLATE_TAGS[0]], // Invalidate the entire list of type actions translates
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllTypeActionsTranslatesQuery,
  useGetTypeActionsTranslateByIdQuery,
  useGetAllTypeActionsTranslateDtosQuery,
  useGetAllTypeActionsTranslateRecordsQuery,
  useCreateTypeActionsTranslateMutation,
  useUpdateTypeActionsTranslateMutation,
  useDeleteTypeActionsTranslateMutation,
} = typeActionsTranslateApiSlice;

// Default export for the slice
export default typeActionsTranslateApiSlice;
