import apiServices from "../../common/apiServices";

// Define the interface for Mission
export interface Mission {
  id: number;
  title: string;
  description: any;
}
// Define the DTO interface for About Us
export interface MissionDto {
  id: number;
  title:  string;
  description: any;
  languageId: number;
  languageName: string;
  imageProfileId: number;
  imageData: any; // Use Uint8Array for binary data
}

// Define the tag types
export const CONTACTS_TAGS_mganga = ['mganga'] as const;

// Enhance the API service with additional tag types
const mgangaApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: CONTACTS_TAGS_mganga,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all mganga
      getAllMissionsM: builder.query<MissionDto[], void>({
        query: () => ({
          url: '/mgangaAll',
          method: 'GET',
        }),
        providesTags: [CONTACTS_TAGS_mganga[0]], // Tag for the list of missions
      }),
        // Query to fetch About Us entries filtered by language
    getMgangaByLanguage: builder.query<MissionDto[], string>({
      query: (languageName) => ({
        url: `/mgangaAllFilter`,
        method: 'GET',
        params: {languageName}, // Pass the languageName as a query parameter
      }),
      providesTags: [CONTACTS_TAGS_mganga[0]], // Tag for the list of missions
    }),
      
      // Endpoint to fetch a specific mission by ID
      getMissionMById: builder.query<Mission, number>({
        query: (id) => ({
          url: `/mganga/${id}`,
          method: 'GET',
        }),
        providesTags: (_result, _error, id) => [{ type: CONTACTS_TAGS_mganga[0], id }], // Tag for individual mission
      }),
      // Endpoint to create a new mission
      createMissionM: builder.mutation<Mission, { languageId: any; imageProfileId: any; data: Partial<Mission> }>({
        query: ({ languageId, imageProfileId, data }) => ({
          url: `/mganga?languageId=${languageId}&imageProfileId=${imageProfileId}`, // Add query parameters to the URL
          method: 'POST',
          data: data,
        }),
        invalidatesTags: [CONTACTS_TAGS_mganga[0]], // Invalidate the entire list of missions
      }),
      // Endpoint to update an existing mission by ID
      updateMissionM: builder.mutation<Mission, { id: number; data: Partial<Mission> }>({
        query: ({ id, data }) => ({
          url: `/mganga/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [CONTACTS_TAGS_mganga[0]], // Invalidate the entire list of missions
      }),
      //
      // Endpoint to delete a mission by ID
      deleteMissionM: builder.mutation<void, number>({
        query: (id) => ({
          url: `/mganga/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [CONTACTS_TAGS_mganga[0]], // Invalidate the entire list of missions
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllMissionsMQuery,
  useGetMissionMByIdQuery,
useGetMgangaByLanguageQuery,
  useCreateMissionMMutation,
  useUpdateMissionMMutation,
  useDeleteMissionMMutation,
} = mgangaApiSlice;

// Default export for the slice
export default mgangaApiSlice;
