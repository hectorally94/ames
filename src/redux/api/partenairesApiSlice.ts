import apiServices from "../../common/apiServices";

// Define the interface for Partenaire
export interface Partenaire {
  id: number;
  fullname: string;
  post: string;

}
interface PaginatedResponse<T> {
  data: T[];
  currentPage: number;
  totalItems: number;
  totalPages: number;
}

export interface PartenaireDto {
  id: number;
  fullname: string;
  post: string;
  languageId:any;
  languageName:any;
  imagePartenaireId:any;
  imagedata:any

}
// Define the tag types
export const PARTENAIRE_TAGS = ['Partenaires'] as const;

// Enhance the API service with additional tag types
const partenairesApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: PARTENAIRE_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
           // Endpoint to fetch paginated actions with optional title filtering
           getPaginatedPartenaireAllOne: builder.query<PaginatedResponse<PartenaireDto>, { languageName?: string; page?: number; size?: number; sort?: string }>({
            query: ({ languageName = '',page = 0, size = 3, sort = 'id,desc' }) => ({
              url: '/partenairesAllFilterLanguage',
              params: { languageName, page, size, sort },
              method: 'GET',
            }),
            providesTags: [PARTENAIRE_TAGS[0]], // Tag for the list of actions
          }),
        
      // Endpoint to fetch a specific partenaire by ID
      getPartenaireById: builder.query<Partenaire, number>({
        query: (id) => ({
          url: `/partenaires/${id}`,
          method: 'GET',
        }),
        providesTags: (_result, _error, id) => [{ type: PARTENAIRE_TAGS[0], id }], // Tag for individual partenaire
      }),
     // Endpoint to create a new partenaire
     createPartenaire: builder.mutation<Partenaire, { languageId: any; imagePartenaireId: any; data: Partial<Partenaire> }>({
      query: ({ languageId, imagePartenaireId, data }) => ({
        url: `/partenaires?languageId=${languageId}&imagePartenaireId=${imagePartenaireId}`, // Add query parameters to the URL
        method: 'POST',
        data: data, // Send only `data` in the body
      }),
  invalidatesTags: [PARTENAIRE_TAGS[0]], // Invalidate the entire list of partenaires
}),

      // Endpoint to update an existing partenaire by ID
      updatePartenaire: builder.mutation<Partenaire, { id: number; data: Partial<Partenaire> }>({
        query: ({ id, data }) => ({
          url: `/partenaires/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [PARTENAIRE_TAGS[0]], // Invalidate the entire list of partenaires
      }),
      // Endpoint to delete a partenaire by ID
      deletePartenaire: builder.mutation<void, number>({
        query: (id) => ({
          url: `/partenaires/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [PARTENAIRE_TAGS[0]], // Invalidate the entire list of partenaires
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetPaginatedPartenaireAllOneQuery,
  useGetPartenaireByIdQuery,
  useCreatePartenaireMutation,
  useUpdatePartenaireMutation,
  useDeletePartenaireMutation,
} = partenairesApiSlice;

// Default export for the slice
export default partenairesApiSlice;
