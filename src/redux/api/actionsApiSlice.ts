import apiServices from "../../common/apiServices";

// Define the interface for Action
export interface Action {
  id: number;
  title: string;
  objectif: string;
  recolte: string;
  description: string;
  date:string;
}
interface PaginatedResponse<T> {
  data: T[];
  currentPage: number;
  totalItems: number;
  totalPages: number;
}
// Define the DTO interface for Action
export interface ActionDto {
  id: number;
  title: string;
  objectif: string;
  recolte: string;
  description: string;
  date:string;
  
  typeActionsTranslateId: number;
  typeActionsTranslate: string;
  languageId: number;
  languageName: string;
  categoryTranslateId: number;
  categoryTranslate: string;
  clanguageId: number;
  clanguageName: string;
  storeImageId: number;
  storeImageName: string;
  storeImageType: string;
  imagedata: any;

}

// Define the tag types
export const ACTION_TAGS = ['Action'] as const;

// Enhance the API service with additional tag types
const actionsApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: ACTION_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
       // Endpoint to fetch all actions
       getAllActionsAll: builder.query<ActionDto[], void>({
        query: () => ({
          url: '/actionsAll',
          method: 'GET',
        }),
        providesTags: [ACTION_TAGS[0]], // Tag for the list of actions
      }),
       // Endpoint to fetch paginated actions with optional title filtering
    getPaginatedActions: builder.query<PaginatedResponse<ActionDto>, { title?: string; page?: number; size?: number; sort?: string }>({
      query: ({ title = '', page = 0, size = 2, sort = 'id,desc' }) => ({
        url: '/actionsAllPageByTitle',
        params: { title, page, size, sort },
        method: 'GET',
      }),
      providesTags: [ACTION_TAGS[0]], // Tag for the list of actions
    }),
      // Endpoint to fetch all actions
      getAllActions: builder.query<ActionDto[], void>({
        query: () => ({
          url: '/actionsAllPageByTitleOld',
          method: 'GET',
        }),
        providesTags: [ACTION_TAGS[0]], // Tag for the list of actions
      }),
      // Endpoint to fetch a specific action by ID
      getActionById: builder.query<Action, number>({
        query: (id) => ({
          url: `/actions/${id}`,
          method: 'GET',
        }),
        providesTags: (result, error, id) => [{ type: ACTION_TAGS[0], id }], // Tag for individual action
      }),
      // Endpoint to create a new action
      createAction: builder.mutation<Action, { 
        typeActionsTranslateId: any;
        categoryTranslateId: any;
        storeImageId: any;
        data: Partial<Action>
      }>({
        query: ({ typeActionsTranslateId, categoryTranslateId, storeImageId, data }) => ({
          url: `/${typeActionsTranslateId}/${categoryTranslateId}/${storeImageId}/actions`,
          method: 'POST',
          data: data,
        }),
        invalidatesTags: [ACTION_TAGS[0]], // Invalidate the entire list of actions
      }),
      // Endpoint to update an existing action by ID
      updateAction: builder.mutation<Action, { id: any; data: Partial<Action> }>({
        query: ({ id, data }) => ({
          url: `/actions/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [ACTION_TAGS[0]], // Invalidate the entire list of actions
      }),
      // Endpoint to delete a specific action by ID
      deleteAction: builder.mutation<void, number>({
        query: (id) => ({
          url: `/actions/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [ACTION_TAGS[0]], // Invalidate the entire list of actions
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetPaginatedActionsQuery,
  useGetAllActionsQuery,
  useGetActionByIdQuery,
  useCreateActionMutation,
  useUpdateActionMutation,
  useDeleteActionMutation,
} = actionsApiSlice;

// Default export for the slice
export default actionsApiSlice;
