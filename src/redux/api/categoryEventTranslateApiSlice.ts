import apiServices from "../../common/apiServices";

// Define the interface for CategoryEventTranslate
export interface CategoryEventTranslate {
  id: number;
  categoryEventTranslate: string;
}

// Define the interface for CategoryEventTranslateDto
export interface CategoryEventTranslateDto {
  id: number;
  categoryEventTranslate: string;
  languageId: number;
  languageName: string;
}

// Define the tag types
export const CATEGORY_EVENT_TRANSLATE_TAGS = ['CategoryEventTranslate'] as const;

// Enhance the API service with additional tag types
const categoryEventTranslateApiSlice = apiServices
  .enhanceEndpoints({
    addTagTypes: CATEGORY_EVENT_TRANSLATE_TAGS,
  })
  .injectEndpoints({
    endpoints: (builder) => ({
      // Endpoint to fetch all category event translates
      getAllCategoryEventTranslates: builder.query<CategoryEventTranslate[], void>({
        query: () => ({
          url: '/category-event-translates',
          method: 'GET',
        }),
        providesTags: [CATEGORY_EVENT_TRANSLATE_TAGS[0]], // Tag for the list of category event translates
      }),
      // Endpoint to fetch a specific category event translate by ID
      getCategoryEventTranslateById: builder.query<CategoryEventTranslate, number>({
        query: (id) => ({
          url: `/category-event-translates/${id}`,
          method: 'GET',
        }),
        providesTags: (result, error, id) => [{ type: CATEGORY_EVENT_TRANSLATE_TAGS[0], id }], // Tag for individual category event translate
      }),
      // Endpoint to create a new category event translate
      createCategoryEventTranslate: builder.mutation<CategoryEventTranslate, { languageId: number; data: CategoryEventTranslate }>({
        query: ({ languageId, data }) => ({
          url: `/${languageId}/category-event-translates`,
          method: 'POST',
          data: data,
        }),
        invalidatesTags: [CATEGORY_EVENT_TRANSLATE_TAGS[0]], // Invalidate the entire list of category event translates
      }),
      // Endpoint to update an existing category event translate by ID
      updateCategoryEventTranslate: builder.mutation<CategoryEventTranslate, { id: number; data: Partial<CategoryEventTranslate> }>({
        query: ({ id, data }) => ({
          url: `/category-event-translates/${id}`,
          method: 'PUT',
          data: data,
        }),
        invalidatesTags: [CATEGORY_EVENT_TRANSLATE_TAGS[0]], // Invalidate the entire list of category event translates
      }),
      // Endpoint to delete a category event translate by ID
      deleteCategoryEventTranslate: builder.mutation<void, number>({
        query: (id) => ({
          url: `/category-event-translates/${id}`,
          method: 'DELETE',
        }),
        invalidatesTags: [CATEGORY_EVENT_TRANSLATE_TAGS[0]], // Invalidate the entire list of category event translates
      }),
      // Endpoint to fetch all category event translate DTOs
      getAllCategoryEventTranslateDtos: builder.query<CategoryEventTranslateDto[], void>({
        query: () => ({
          url: '/category-event-translatesDtoAll',
          method: 'GET',
        }),
        providesTags: [CATEGORY_EVENT_TRANSLATE_TAGS[0]], // Tag for the list of category event translate DTOs
      }),
      // Endpoint to fetch all category event translate details
      getAllCategoryEventTranslatesDetailed: builder.query<CategoryEventTranslateDto[], void>({
        query: () => ({
          url: '/category-event-translatesAll',
          method: 'GET',
        }),
        providesTags: [CATEGORY_EVENT_TRANSLATE_TAGS[0]], // Tag for the detailed list of category event translates
      }),
    }),
    overrideExisting: false,
  });

// Export hooks generated by createApi for each endpoint
export const {
  useGetAllCategoryEventTranslatesQuery,
  useGetCategoryEventTranslateByIdQuery,
  useCreateCategoryEventTranslateMutation,
  useUpdateCategoryEventTranslateMutation,
  useDeleteCategoryEventTranslateMutation,
  useGetAllCategoryEventTranslateDtosQuery,
  useGetAllCategoryEventTranslatesDetailedQuery,
} = categoryEventTranslateApiSlice;

// Default export for the slice
export default categoryEventTranslateApiSlice;
